/*
 /$$   /$$                     /$$        /$$$$$$              /$$    
| $$  | $$                    | $$       /$$__  $$            | $$    
| $$  | $$  /$$$$$$   /$$$$$$$| $$$$$$$ | $$  \__/  /$$$$$$  /$$$$$$  
| $$$$$$$$ |____  $$ /$$_____/| $$__  $$|  $$$$$$  /$$__  $$|_  $$_/  
| $$__  $$  /$$$$$$$|  $$$$$$ | $$  \ $$ \____  $$| $$$$$$$$  | $$    
| $$  | $$ /$$__  $$ \____  $$| $$  | $$ /$$  \ $$| $$_____/  | $$ /$$
| $$  | $$|  $$$$$$$ /$$$$$$$/| $$  | $$|  $$$$$$/|  $$$$$$$  |  $$$$/
|__/  |__/ \_______/|_______/ |__/  |__/ \______/  \_______/   \___/ 
*/

/*
- HashSet is a data structure that is used to store a collection of unique elements in no particular order. 
  It is implemented as an unordered set, using a hash table internally to achieve efficient search and insertion of elements.

- KEY FEATURES OF HASHSET IN C++:
  - It provides constant-time average complexity for most operations such as insertion, removal, and search.
  - The elements in a HashSet are unique, which means that there can be no duplicates.
  - The elements are not sorted in any particular order.
  - It is implemented using a hash table, which is an array of buckets that contain the elements. 
    Each bucket is identified by a unique key, which is generated by a hash function.
  - In C++, the HashSet is implemented as an unordered_set class in the standard library.
*/

#include <iostream>
#include <unordered_set>

using namespace std;


int main() {
    // create a hashset
    unordered_set<int> mySet;

    // insert some values in hashset
    mySet.insert(3);
    mySet.insert(2);
    mySet.insert(4);
    mySet.insert(1);

    // check if an element is in hashset
    if (mySet.count(4)) {
        cout << "Element found!" << endl;
    } else {
        cout << "Element not found!" << endl;
    }

    // remove element from hashset
    mySet.erase(2);

    // iterate through the elements
    for (auto i = mySet.begin(); i != mySet.end(); i++) {
        cout << *i << " ";
    }
    cout << endl;
    
    return 0;
}